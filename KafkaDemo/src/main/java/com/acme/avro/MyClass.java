/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.acme.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MyClass extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 325623710972863537L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyClass\",\"namespace\":\"com.acme.avro\",\"fields\":[{\"name\":\"CreatedAt\",\"type\":\"string\"},{\"name\":\"Text\",\"type\":\"string\"},{\"name\":\"User\",\"type\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"aliasName\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence CreatedAt;
  @Deprecated public java.lang.CharSequence Text;
  @Deprecated public com.acme.avro.User User;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyClass() {}

  /**
   * All-args constructor.
   * @param CreatedAt The new value for CreatedAt
   * @param Text The new value for Text
   * @param User The new value for User
   */
  public MyClass(java.lang.CharSequence CreatedAt, java.lang.CharSequence Text, com.acme.avro.User User) {
    this.CreatedAt = CreatedAt;
    this.Text = Text;
    this.User = User;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CreatedAt;
    case 1: return Text;
    case 2: return User;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CreatedAt = (java.lang.CharSequence)value$; break;
    case 1: Text = (java.lang.CharSequence)value$; break;
    case 2: User = (com.acme.avro.User)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CreatedAt' field.
   * @return The value of the 'CreatedAt' field.
   */
  public java.lang.CharSequence getCreatedAt() {
    return CreatedAt;
  }

  /**
   * Sets the value of the 'CreatedAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.CharSequence value) {
    this.CreatedAt = value;
  }

  /**
   * Gets the value of the 'Text' field.
   * @return The value of the 'Text' field.
   */
  public java.lang.CharSequence getText() {
    return Text;
  }

  /**
   * Sets the value of the 'Text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.Text = value;
  }

  /**
   * Gets the value of the 'User' field.
   * @return The value of the 'User' field.
   */
  public com.acme.avro.User getUser() {
    return User;
  }

  /**
   * Sets the value of the 'User' field.
   * @param value the value to set.
   */
  public void setUser(com.acme.avro.User value) {
    this.User = value;
  }

  /**
   * Creates a new MyClass RecordBuilder.
   * @return A new MyClass RecordBuilder
   */
  public static com.acme.avro.MyClass.Builder newBuilder() {
    return new com.acme.avro.MyClass.Builder();
  }

  /**
   * Creates a new MyClass RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyClass RecordBuilder
   */
  public static com.acme.avro.MyClass.Builder newBuilder(com.acme.avro.MyClass.Builder other) {
    return new com.acme.avro.MyClass.Builder(other);
  }

  /**
   * Creates a new MyClass RecordBuilder by copying an existing MyClass instance.
   * @param other The existing instance to copy.
   * @return A new MyClass RecordBuilder
   */
  public static com.acme.avro.MyClass.Builder newBuilder(com.acme.avro.MyClass other) {
    return new com.acme.avro.MyClass.Builder(other);
  }

  /**
   * RecordBuilder for MyClass instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyClass>
    implements org.apache.avro.data.RecordBuilder<MyClass> {

    private java.lang.CharSequence CreatedAt;
    private java.lang.CharSequence Text;
    private com.acme.avro.User User;
    private com.acme.avro.User.Builder UserBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.acme.avro.MyClass.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CreatedAt)) {
        this.CreatedAt = data().deepCopy(fields()[0].schema(), other.CreatedAt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Text)) {
        this.Text = data().deepCopy(fields()[1].schema(), other.Text);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.User)) {
        this.User = data().deepCopy(fields()[2].schema(), other.User);
        fieldSetFlags()[2] = true;
      }
      if (other.hasUserBuilder()) {
        this.UserBuilder = com.acme.avro.User.newBuilder(other.getUserBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MyClass instance
     * @param other The existing instance to copy.
     */
    private Builder(com.acme.avro.MyClass other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CreatedAt)) {
        this.CreatedAt = data().deepCopy(fields()[0].schema(), other.CreatedAt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Text)) {
        this.Text = data().deepCopy(fields()[1].schema(), other.Text);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.User)) {
        this.User = data().deepCopy(fields()[2].schema(), other.User);
        fieldSetFlags()[2] = true;
      }
      this.UserBuilder = null;
    }

    /**
      * Gets the value of the 'CreatedAt' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedAt() {
      return CreatedAt;
    }

    /**
      * Sets the value of the 'CreatedAt' field.
      * @param value The value of 'CreatedAt'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setCreatedAt(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.CreatedAt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CreatedAt' field has been set.
      * @return True if the 'CreatedAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CreatedAt' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearCreatedAt() {
      CreatedAt = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return Text;
    }

    /**
      * Sets the value of the 'Text' field.
      * @param value The value of 'Text'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setText(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Text = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Text' field has been set.
      * @return True if the 'Text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Text' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearText() {
      Text = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'User' field.
      * @return The value.
      */
    public com.acme.avro.User getUser() {
      return User;
    }

    /**
      * Sets the value of the 'User' field.
      * @param value The value of 'User'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setUser(com.acme.avro.User value) {
      validate(fields()[2], value);
      this.UserBuilder = null;
      this.User = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'User' field has been set.
      * @return True if the 'User' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'User' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.avro.User.Builder getUserBuilder() {
      if (UserBuilder == null) {
        if (hasUser()) {
          setUserBuilder(com.acme.avro.User.newBuilder(User));
        } else {
          setUserBuilder(com.acme.avro.User.newBuilder());
        }
      }
      return UserBuilder;
    }

    /**
     * Sets the Builder instance for the 'User' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.acme.avro.MyClass.Builder setUserBuilder(com.acme.avro.User.Builder value) {
      clearUser();
      UserBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'User' field has an active Builder instance
     * @return True if the 'User' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return UserBuilder != null;
    }

    /**
      * Clears the value of the 'User' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearUser() {
      User = null;
      UserBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public MyClass build() {
      try {
        MyClass record = new MyClass();
        record.CreatedAt = fieldSetFlags()[0] ? this.CreatedAt : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Text = fieldSetFlags()[1] ? this.Text : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (UserBuilder != null) {
          record.User = this.UserBuilder.build();
        } else {
          record.User = fieldSetFlags()[2] ? this.User : (com.acme.avro.User) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
