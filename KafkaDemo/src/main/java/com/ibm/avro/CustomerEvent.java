/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ibm.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CustomerEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2406098061975096640L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomerEvent\",\"namespace\":\"com.ibm.avro\",\"fields\":[{\"name\":\"custid\",\"type\":\"string\"},{\"name\":\"cname\",\"type\":\"string\"},{\"name\":\"shipto\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence custid;
  @Deprecated public java.lang.CharSequence cname;
  @Deprecated public java.lang.CharSequence shipto;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomerEvent() {}

  /**
   * All-args constructor.
   * @param custid The new value for custid
   * @param cname The new value for cname
   * @param shipto The new value for shipto
   */
  public CustomerEvent(java.lang.CharSequence custid, java.lang.CharSequence cname, java.lang.CharSequence shipto) {
    this.custid = custid;
    this.cname = cname;
    this.shipto = shipto;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return custid;
    case 1: return cname;
    case 2: return shipto;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: custid = (java.lang.CharSequence)value$; break;
    case 1: cname = (java.lang.CharSequence)value$; break;
    case 2: shipto = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'custid' field.
   * @return The value of the 'custid' field.
   */
  public java.lang.CharSequence getCustid() {
    return custid;
  }

  /**
   * Sets the value of the 'custid' field.
   * @param value the value to set.
   */
  public void setCustid(java.lang.CharSequence value) {
    this.custid = value;
  }

  /**
   * Gets the value of the 'cname' field.
   * @return The value of the 'cname' field.
   */
  public java.lang.CharSequence getCname() {
    return cname;
  }

  /**
   * Sets the value of the 'cname' field.
   * @param value the value to set.
   */
  public void setCname(java.lang.CharSequence value) {
    this.cname = value;
  }

  /**
   * Gets the value of the 'shipto' field.
   * @return The value of the 'shipto' field.
   */
  public java.lang.CharSequence getShipto() {
    return shipto;
  }

  /**
   * Sets the value of the 'shipto' field.
   * @param value the value to set.
   */
  public void setShipto(java.lang.CharSequence value) {
    this.shipto = value;
  }

  /**
   * Creates a new CustomerEvent RecordBuilder.
   * @return A new CustomerEvent RecordBuilder
   */
  public static com.ibm.avro.CustomerEvent.Builder newBuilder() {
    return new com.ibm.avro.CustomerEvent.Builder();
  }

  /**
   * Creates a new CustomerEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomerEvent RecordBuilder
   */
  public static com.ibm.avro.CustomerEvent.Builder newBuilder(com.ibm.avro.CustomerEvent.Builder other) {
    return new com.ibm.avro.CustomerEvent.Builder(other);
  }

  /**
   * Creates a new CustomerEvent RecordBuilder by copying an existing CustomerEvent instance.
   * @param other The existing instance to copy.
   * @return A new CustomerEvent RecordBuilder
   */
  public static com.ibm.avro.CustomerEvent.Builder newBuilder(com.ibm.avro.CustomerEvent other) {
    return new com.ibm.avro.CustomerEvent.Builder(other);
  }

  /**
   * RecordBuilder for CustomerEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomerEvent>
    implements org.apache.avro.data.RecordBuilder<CustomerEvent> {

    private java.lang.CharSequence custid;
    private java.lang.CharSequence cname;
    private java.lang.CharSequence shipto;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ibm.avro.CustomerEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.custid)) {
        this.custid = data().deepCopy(fields()[0].schema(), other.custid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cname)) {
        this.cname = data().deepCopy(fields()[1].schema(), other.cname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.shipto)) {
        this.shipto = data().deepCopy(fields()[2].schema(), other.shipto);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CustomerEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ibm.avro.CustomerEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.custid)) {
        this.custid = data().deepCopy(fields()[0].schema(), other.custid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cname)) {
        this.cname = data().deepCopy(fields()[1].schema(), other.cname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.shipto)) {
        this.shipto = data().deepCopy(fields()[2].schema(), other.shipto);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'custid' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustid() {
      return custid;
    }

    /**
      * Sets the value of the 'custid' field.
      * @param value The value of 'custid'.
      * @return This builder.
      */
    public com.ibm.avro.CustomerEvent.Builder setCustid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.custid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'custid' field has been set.
      * @return True if the 'custid' field has been set, false otherwise.
      */
    public boolean hasCustid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'custid' field.
      * @return This builder.
      */
    public com.ibm.avro.CustomerEvent.Builder clearCustid() {
      custid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cname' field.
      * @return The value.
      */
    public java.lang.CharSequence getCname() {
      return cname;
    }

    /**
      * Sets the value of the 'cname' field.
      * @param value The value of 'cname'.
      * @return This builder.
      */
    public com.ibm.avro.CustomerEvent.Builder setCname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cname' field has been set.
      * @return True if the 'cname' field has been set, false otherwise.
      */
    public boolean hasCname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cname' field.
      * @return This builder.
      */
    public com.ibm.avro.CustomerEvent.Builder clearCname() {
      cname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipto' field.
      * @return The value.
      */
    public java.lang.CharSequence getShipto() {
      return shipto;
    }

    /**
      * Sets the value of the 'shipto' field.
      * @param value The value of 'shipto'.
      * @return This builder.
      */
    public com.ibm.avro.CustomerEvent.Builder setShipto(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.shipto = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'shipto' field has been set.
      * @return True if the 'shipto' field has been set, false otherwise.
      */
    public boolean hasShipto() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'shipto' field.
      * @return This builder.
      */
    public com.ibm.avro.CustomerEvent.Builder clearShipto() {
      shipto = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CustomerEvent build() {
      try {
        CustomerEvent record = new CustomerEvent();
        record.custid = fieldSetFlags()[0] ? this.custid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cname = fieldSetFlags()[1] ? this.cname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.shipto = fieldSetFlags()[2] ? this.shipto : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
